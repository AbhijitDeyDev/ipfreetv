name: Build NativeScript Android APK

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - none
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean
      update_package_json:
        description: 'Update package.json version'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: 22

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install NativeScript CLI
      run: |
        npm install -g nativescript

    - name: Install dependencies
      run: npm install

    - name: Read current package.json and nativescript.config.ts
      id: package-info
      run: |
        # Create a Node.js script to read the config
        cat > read-config.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // Read package.json version
        const packageJson = require('./package.json');
        const currentVersion = packageJson.version;

        let appName = packageJson.name || 'IPFreeTV';
        let appId = 'com.abhijit.ipfreetv';

        // Try to read nativescript.config.ts
        const configPath = './nativescript.config.ts';
        if (fs.existsSync(configPath)) {
          try {
            const configContent = fs.readFileSync(configPath, 'utf8');

            // Extract app ID using regex - handle various formats
            const idMatches = [
              /id:\s*['"`]([^'"`]*?)['"`]/,
              /"id":\s*['"`]([^'"`]*?)['"`]/,
              /'id':\s*['"`]([^'"`]*?)['"`]/
            ];

            for (const regex of idMatches) {
              const match = configContent.match(regex);
              if (match) {
                appId = match[1];
                break;
              }
            }

            // Try to extract app display name - handle various formats
            const nameMatches = [
              /projectName:\s*['"`]([^'"`]*?)['"`]/,
              /"projectName":\s*['"`]([^'"`]*?)['"`]/,
              /'projectName':\s*['"`]([^'"`]*?)['"`]/
            ];

            for (const regex of nameMatches) {
              const match = configContent.match(regex);
              if (match) {
                appName = match[1];
                break;
              }
            }

            console.log('✅ Successfully parsed nativescript.config.ts');
            console.log(`📖 Found app ID: ${appId}`);
            console.log(`📖 Found app name: ${appName}`);
          } catch (error) {
            console.log('⚠️ Error parsing nativescript.config.ts:', error.message);
          }
        } else {
          console.log('❌ nativescript.config.ts not found, using package.json values');
        }

        // Clean app name for filename usage
        const cleanAppName = appName.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();

        // Output the values
        console.log(`CURRENT_VERSION=${currentVersion}`);
        console.log(`APP_NAME=${appName}`);
        console.log(`APP_ID=${appId}`);
        console.log(`CLEAN_NAME=${cleanAppName}`);
        EOF

        # Run the Node.js script and capture output
        node read-config.js > config-output.txt

        # Extract values from output
        CURRENT_VERSION=$(grep "CURRENT_VERSION=" config-output.txt | cut -d'=' -f2- | tr -d '\n\r' | xargs)
        APP_NAME=$(grep "APP_NAME=" config-output.txt | cut -d'=' -f2- | tr -d '\n\r' | xargs)
        APP_ID=$(grep "APP_ID=" config-output.txt | cut -d'=' -f2- | tr -d '\n\r' | xargs)
        CLEAN_APP_NAME=$(grep "CLEAN_NAME=" config-output.txt | cut -d'=' -f2- | tr -d '\n\r' | xargs)

        # Set GitHub Actions outputs
        {
          echo "current_version=${CURRENT_VERSION}"
          echo "app_name=${APP_NAME}"
          echo "app_id=${APP_ID}"
          echo "clean_app_name=${CLEAN_APP_NAME}"
        } >> "$GITHUB_OUTPUT"

        echo "📱 App: $APP_NAME"
        echo "🔢 Current Version: $CURRENT_VERSION"
        echo "🆔 App ID: $APP_ID"

        # Cleanup
        rm read-config.js config-output.txt

    - name: Calculate new version
      id: new-version
      run: |
        CURRENT_VERSION="${{ steps.package-info.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"

        if [ "$VERSION_TYPE" != "none" ]; then
          echo "Calculating new version from $CURRENT_VERSION with $VERSION_TYPE bump"

          # Split version into parts
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case $VERSION_TYPE in
            "major")
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            "minor")
              minor=$((minor + 1))
              patch=0
              ;;
            "patch")
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="$major.$minor.$patch"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "🔄 New Version: $NEW_VERSION"
        else
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "📌 Version unchanged: $CURRENT_VERSION"
        fi

    - name: Update package.json and Android app.gradle versions
      if: github.event.inputs.update_package_json == 'true' && steps.new-version.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
        echo "📝 Updating package.json version to $NEW_VERSION"

        # Update package.json using npm version command
        npm version $NEW_VERSION --no-git-tag-version --allow-same-version

        # Verify the update
        UPDATED_VERSION=$(node -p "require('./package.json').version")
        echo "✅ Package.json updated to version: $UPDATED_VERSION"

        # Also update package-lock.json if it exists
        if [ -f "package-lock.json" ]; then
          echo "📝 Updating package-lock.json version"
          npm version $NEW_VERSION --no-git-tag-version --allow-same-version
        fi

        # Calculate version code for Android (convert semantic version to integer)
        # Format: major*10000 + minor*100 + patch (e.g., 1.2.3 -> 10203)
        IFS='.' read -r major minor patch <<< "$NEW_VERSION"
        VERSION_CODE=$((major * 10000 + minor * 100 + patch))
        echo "📱 Calculated Android version code: $VERSION_CODE"

        # Update Android app.gradle if it exists
        ANDROID_GRADLE_PATH="./App_Resources/Android/app.gradle"
        if [ -f "$ANDROID_GRADLE_PATH" ]; then
          echo "📱 Updating Android app.gradle..."

          # Update versionName
          sed -i.tmp "s/versionName "[^"]*"/versionName "$NEW_VERSION"/g" "$ANDROID_GRADLE_PATH"

          # Update versionCode
          sed -i.tmp "s/versionCode [0-9]*/versionCode $VERSION_CODE/g" "$ANDROID_GRADLE_PATH"

          # Remove temporary file
          rm -f "$ANDROID_GRADLE_PATH.tmp"

          echo "✅ Android app.gradle updated:"
          echo "  - versionName: "$NEW_VERSION""
          echo "  - versionCode: $VERSION_CODE"

          # Show the updated section for verification
          echo "🔍 Updated Android gradle section:"
          grep -A 5 -B 5 "versionCode\|versionName" "$ANDROID_GRADLE_PATH" || echo "Version lines not found in expected format"

          # Verify the updates were successful
          GRADLE_VERSION_NAME=$(grep 'versionName' "$ANDROID_GRADLE_PATH" | sed 's/.*versionName "\([^"]*\)".*/\1/')
          GRADLE_VERSION_CODE=$(grep 'versionCode' "$ANDROID_GRADLE_PATH" | sed 's/.*versionCode \([0-9]*\).*/\1/')

          echo "🔍 Verification:"
          if [ "$GRADLE_VERSION_NAME" = "$NEW_VERSION" ]; then
            echo "✅ Android versionName: $GRADLE_VERSION_NAME"
          else
            echo "❌ Android versionName: Expected $NEW_VERSION, got $GRADLE_VERSION_NAME"
          fi

          if [ "$GRADLE_VERSION_CODE" = "$VERSION_CODE" ]; then
            echo "✅ Android versionCode: $GRADLE_VERSION_CODE"
          else
            echo "❌ Android versionCode: Expected $VERSION_CODE, got $GRADLE_VERSION_CODE"
          fi
        else
          echo "⚠️ Android app.gradle not found at $ANDROID_GRADLE_PATH"
        fi

        # Create a summary of all updated files
        echo ""
        echo "📋 Version Update Summary:"
        echo "├── package.json: $NEW_VERSION"
        if [ -f "package-lock.json" ]; then
          echo "├── package-lock.json: $NEW_VERSION"
        fi
        if [ -f "$ANDROID_GRADLE_PATH" ]; then
          echo "└── Android app.gradle: versionName "$NEW_VERSION", versionCode $VERSION_CODE"
        fi
        echo ""

        echo "✅ All version updates completed successfully!"

    - name: Set final version for build
      id: build-version
      run: |
        if [ "${{ steps.new-version.outputs.version_changed }}" == "true" ]; then
          VERSION="${{ steps.new-version.outputs.new_version }}"
        else
          VERSION="${{ steps.package-info.outputs.current_version }}"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "🏷️ Build Version: $VERSION"

    - name: Set build info
      id: build-info
      run: |
        echo "date=$(date +'%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT
        echo "timestamp=$(date +'%s')" >> $GITHUB_OUTPUT

    - name: Build Android Release APK
      run: |
        echo "🔨 Building release APK with optimizations..."
        echo "Version: ${{ steps.build-version.outputs.version }}"
        echo "App: ${{ steps.package-info.outputs.app_name }}"

        ns build android --release --copy-to . --env.snapshot --env.compileSnapshot --env.uglify --key-store-path ./AndroidKey.jks --key-store-alias AndroidKey --key-store-password AndroidPass --key-store-alias-password AndroidPass

        # Verify APK creation
        if [ -f "app-universal-release.apk" ]; then
          echo "✅ Release APK created successfully"
          ls -lh app-universal-release.apk
        else
          echo "❌ Release APK not found, checking alternatives..."
          find . -maxdepth 1 -name "*release*.apk" -type f
        fi

    - name: Organize and rename APK files
      run: |
        mkdir -p build-output

        VERSION="${{ steps.build-version.outputs.version }}"
        CLEAN_APP_NAME="${{ steps.package-info.outputs.clean_app_name }}"
        TIMESTAMP="${{ steps.build-info.outputs.timestamp }}"

        # Process release APK
        if [ -f "app-universal-release.apk" ]; then
          NEW_NAME="${CLEAN_APP_NAME}-release-v${VERSION}-${TIMESTAMP}.apk"
          mv app-universal-release.apk "build-output/$NEW_NAME"
          echo "✅ Release APK: $NEW_NAME"
          echo "release_apk_name=$NEW_NAME" >> $GITHUB_ENV
        fi

        # Handle any other APKs
        for apk in *.apk; do
          if [ -f "$apk" ]; then
            mv "$apk" "build-output/"
            echo "📦 Moved additional APK: $apk"
          fi
        done

        echo "📁 Final build output:"
        ls -la build-output/

    - name: Commit version changes
      if: github.event.inputs.update_package_json == 'true' && steps.new-version.outputs.version_changed == 'true'
      run: |
        VERSION="${{ steps.build-version.outputs.version }}"
        APP_NAME="${{ steps.package-info.outputs.app_name }}"

        # Add changed files
        git add package.json
        if [ -f "package-lock.json" ]; then
          git add package-lock.json
        fi

        # Commit the version bump
        git commit -m "🔖 Bump $APP_NAME to v$VERSION

        - Updated package.json version
        - Build triggered via GitHub Actions
        - Generated optimized APK files
        - App ID: ${{ steps.package-info.outputs.app_id }}

        [skip ci]"

        echo "✅ Version changes committed"

    - name: Create and push tag
      if: github.event.inputs.update_package_json == 'true' && steps.new-version.outputs.version_changed == 'true'
      run: |
        TAG="${{ steps.build-version.outputs.tag }}"
        APP_NAME="${{ steps.package-info.outputs.app_name }}"
        APP_ID="${{ steps.package-info.outputs.app_id }}"

        # Set repo url
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/AbhijitDeyDev/ipfreetv.git

        # Create annotated tag
        git tag -a "$TAG" -m "Release $TAG - $APP_NAME

        🚀 NativeScript Android Release
        📱 App: $APP_NAME
        🆔 App ID: $APP_ID
        🔢 Version: ${{ steps.build-version.outputs.version }}
        📅 Date: $(date +'%Y-%m-%d %H:%M UTC')
        🏗️ Build: Optimized with snapshots and uglification
        ⚙️ Config: Read from nativescript.config.ts"

        # Push commits and tags
        git push origin HEAD:${{ github.ref_name }}
        git push origin "$TAG"

        echo "✅ Tag $TAG created and pushed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Debug APK
      if: github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == 'both'
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk-v${{ steps.build-version.outputs.version }}
        path: build-output/*debug*.apk

    - name: Upload Release APK
      if: github.event.inputs.build_type == 'release' || github.event.inputs.build_type == 'both'
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-v${{ steps.build-version.outputs.version }}
        path: build-output/*release*.apk

    - name: Generate comprehensive release notes
      if: github.event.inputs.create_release == 'true'
      run: |
        VERSION="${{ steps.build-version.outputs.version }}"
        APP_NAME="${{ steps.package-info.outputs.app_name }}"
        APP_ID="${{ steps.package-info.outputs.app_id }}"

        cat > release_notes.md << EOF
        # 🚀 $APP_NAME v$VERSION

        ## 📱 Application Details
        - **App Name**: $APP_NAME
        - **Version**: $VERSION
        - **App ID**: $APP_ID
        - **Build Date**: $(date +'%Y-%m-%d %H:%M UTC')
        - **Platform**: Android

        cat >> release_notes.md << EOF

        ## 🔄 Recent Changes
        EOF

        git log --pretty=format:"- %s (%h)" --no-merges -10 >> release_notes.md

        echo "" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "*Generated automatically by GitHub Actions* 🤖" >> release_notes.md

    - name: Create GitHub Release
      if: github.event.inputs.create_release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.build-version.outputs.tag }}
        name: 📱 ${{ steps.package-info.outputs.app_name }} v${{ steps.build-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: build-output/*.apk
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Comprehensive Build Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🎉 Build Completed Successfully!

        ## 📱 Application Information
        | Property | Value |
        |----------|--------|
        | **App Name** | ${{ steps.package-info.outputs.app_name }} |
        | **App ID** | ${{ steps.package-info.outputs.app_id }} |
        | **Version** | ${{ steps.build-version.outputs.version }} |
        | **Build Date** | $(date +'%Y-%m-%d %H:%M UTC') |
        | **Config Source** | nativescript.config.ts |

        ## ⚡ Optimizations Applied
        - ✅ **V8 Snapshots** - Faster app startup (40-60% improvement)
        - ✅ **Compiled Snapshots** - Reduced bundle size
        - ✅ **Code Uglification** - Minified JavaScript

        ## 📋 Build Configuration
        | Setting | Value |
        |---------|--------|
        | **Build Type** | ${{ github.event.inputs.build_type }} |
        | **Version Bump** | ${{ github.event.inputs.version_type }} |
        | **Update package.json** | ${{ github.event.inputs.update_package_json }} |
        | **Create Release** | ${{ github.event.inputs.create_release }} |
        | **Version Changed** | ${{ steps.new-version.outputs.version_changed }} |

        ## 📦 Generated Files
        EOF

        if [ "${{ github.event.inputs.build_type }}" == "debug" ] || [ "${{ github.event.inputs.build_type }}" == "both" ]; then
          echo "- 🐛 **Debug APK**: \`${debug_apk_name:-Debug build available}\`" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ github.event.inputs.build_type }}" == "release" ] || [ "${{ github.event.inputs.build_type }}" == "both" ]; then
          echo "- 🚀 **Release APK**: \`${release_apk_name:-Release build available}\`" >> $GITHUB_STEP_SUMMARY
        fi

        cat >> $GITHUB_STEP_SUMMARY << EOF

        ## 📥 Download Instructions
        1. Go to the **Actions** tab
        2. Click on this workflow run
        3. Scroll to **Artifacts** section
        4. Download your APK files

        EOF

        if [ "${{ steps.new-version.outputs.version_changed }}" == "true" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔖 Version Management" >> $GITHUB_STEP_SUMMARY
          echo "- Package.json version updated from ${{ steps.package-info.outputs.current_version }} to ${{ steps.build-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Git tag ${{ steps.build-version.outputs.tag }} created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- Changes committed to repository" >> $GITHUB_STEP_SUMMARY
        fi
